#!/bin/bash
set -x
set -eo pipefail

export ODO_UTILS_DIR=/opt/odo
export ODO_IMAGE_MAPPINGS_FILE=${ODO_UTILS_DIR}/language-scripts/image-mappings.json

IMAGE_LANG=`${ODO_UTILS_DIR}/bin/getlanguage`

# If WorkingDir is injected as an env from odo and destination path is not
# equal to WorkingDir(if not copying directly to working dir) and deployment
# dir is not working dir
if [ -n "${ODO_S2I_WORKING_DIR}" ] && \
    [ "${ODO_S2I_SRC_BIN_PATH}" != "${ODO_S2I_WORKING_DIR}" ]; then

    # If ODO_SRC_BACKUP_DIR is injected by odo
    if [ -n  "$ODO_SRC_BACKUP_DIR" ]; then

        # If it doesn't exist create it
        if [ ! -d "${ODO_SRC_BACKUP_DIR}" ]; then
            mkdir -p "${ODO_SRC_BACKUP_DIR}"/src
        fi

        # Backup the sources in DestinationDir to ODO_SRC_BACKUP_DIR because
        # the assemble script for some s2i images moves sources from
        # DestinationDir to WorkingDir thereby deleting it
        # there(DestinationDir). So, back it up for partial push use cases like
        # watch
        rsync -rlO "${ODO_S2I_SRC_BIN_PATH}"/src/. "${ODO_SRC_BACKUP_DIR}"/src/
    fi

    # Backup field separators and set it to \n to clean the destination dir of
    # even those files and folders that have space in name the shell's ls -A
    # interprets for some reason the space as a new line and hence including
    # '\n' in IFS works-around it
    b_IFS=$IFS
    b_OFS=$OIFS

    OIFS="$IFS"
    IFS=$'\n'

    # Clear all those dirs in WorkingDir that exist in DestinationDir so that
    # when assemble script moves sources from DestinationDir to WorkingDir, it
    # sees the directory clean and doesn't complain:
    # https://github.com/openshift/odo/issues/1054
    for file in `ls -A "${ODO_S2I_SRC_BIN_PATH}"/src/`
    do
            rm -fr "$ODO_S2I_WORKING_DIR/$file"
    done

    # Restore OIFS and IFS to previous values
    OIFS=$b_OFS
    IFS=$b_IFS

    # In case of java clear off the target directory
    # ToDo: This is a temporary hack to work-around the issue with openjdk s2i
    # image. Eventually, idea is to try to make this generic and agnostic of
    # any particular s2i image
    if [ -n "$ODO_S2I_BUILDER_IMG" ] && \
        [ "$ODO_S2I_BUILDER_IMG" == "redhat-openjdk-18/openjdk18-openshift" ]; then
        rm -fr ${ODO_S2I_SRC_BIN_PATH}/src/target
    fi
fi

# We now run the assembly script. If there is a custom one written in the
# source files, we use that instead.
if [ -f ${ODO_S2I_SRC_BIN_PATH}/src/.s2i/bin/assemble ]; then
    ${ODO_S2I_SRC_BIN_PATH}/src/.s2i/bin/assemble
elif [ -n "${IMAGE_LANG}" ]; then
    ${ODO_UTILS_DIR}/language-scripts/${IMAGE_LANG}/dev-assemble
elif [ -n "${ODO_S2I_SCRIPTS_URL}" ]; then 
    # For S2I scripts path, use the env var set by odo if not available in
    # component source
    rm -rf /opt/app-root/src/.git # ensure we don't copy git files since they can cause problems
    ${ODO_S2I_SCRIPTS_URL}/assemble
else
    /usr/libexec/s2i/assemble
fi

# After assemble script is run(which deletes sources from destination dir by
# doing mv of them to the WorkingDir) and if only its component created from
# source, copy back the sources from Source backup dir to DestinationDir for
# subsequent push of only updates by watch
if [ ! -z "${ODO_S2I_WORKING_DIR}" ] && [ -n  "$ODO_SRC_BACKUP_DIR" ] && \ 
    ([ "${ODO_S2I_SRC_BIN_PATH}" != "${ODO_S2I_WORKING_DIR}" ] && \ 
    [ "${ODO_S2I_DEPLOYMENT_DIR}" != "${ODO_S2I_WORKING_DIR}" ]); then 
    rsync -rlO ${ODO_SRC_BACKUP_DIR}/src/. ${ODO_S2I_SRC_BIN_PATH}/src/
fi

# For components converted to devfile, we don't need to run following steps. As
# this steps already run by devfile push code.
if [ -z "${ODO_S2I_CONVERTED_DEVFILE}" ]; then
    # Now that the assemble is successful; change autostart from false to true
    # in supervisor.conf present on persistent volume mounted on
    # "/opt/app-root"
    PV_MNT_PT="/opt/app-root"
    sed -i 's/autostart=false/autostart=true/g' ${PV_MNT_PT}/conf/supervisor.conf
    # Restart supervisord in order to actualy run the application
    # This is a dumb way to restart as supervisord does not have a restart function
    ${ODO_UTILS_DIR}/bin/supervisord ctl stop run; ${ODO_UTILS_DIR}/bin/supervisord ctl start run
fi
