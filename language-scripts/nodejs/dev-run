#!/bin/bash
set -e
set -x

# DEV_MODE is true by default, which means that the application will be started with remote debugging enabled.
DEV_MODE="${DEV_MODE:=true}"

#from: /usr/libexec/s2i/env
# If NODE_ENV is not set by the user, then default to production.
# User may also set DEV_MODE=true
if [ -z "$NODE_ENV" ]; then
  if [ "$DEV_MODE" == true ]; then
    export NODE_ENV=development
  else
    export NODE_ENV=production
  fi
fi

# Set the environment for this build configuration to production by default.
if [ "$NODE_ENV" == "production" ]; then
  export DEV_MODE=false
else
  export DEV_MODE=true
fi

# from /usr/libexec/s2i/generate-container-user
# Set current user in nss_wrapper
USER_ID=$(id -u)
GROUP_ID=$(id -g)

if [ x"$USER_ID" != x"0" -a x"$USER_ID" != x"1001" ]; then

    NSS_WRAPPER_PASSWD=/opt/app-root/etc/passwd
    NSS_WRAPPER_GROUP=/etc/group

    cat /etc/passwd | sed -e 's/^default:/builder:/' > $NSS_WRAPPER_PASSWD

    echo "default:x:${USER_ID}:${GROUP_ID}:Default Application User:${HOME}:/sbin/nologin" >> $NSS_WRAPPER_PASSWD

    export NSS_WRAPPER_PASSWD
    export NSS_WRAPPER_GROUP

    LD_PRELOAD=libnss_wrapper.so
    export LD_PRELOAD
fi

# actuall run script

# Set the environment for this build configuration to production by default.
if [ "$NODE_ENV" == "production" ]; then
  export DEV_MODE=false
else
  export DEV_MODE=true
  set -x
fi

# Runs the nodejs application server.
run_node() {
  echo -e "Using Node.js version: $(node --version)"
  echo -e "Environment: \n\tDEV_MODE=${DEV_MODE}\n\tNODE_ENV=${NODE_ENV}\n\tDEBUG_PORT=${DEBUG_PORT}"
  echo -e "Running as user $(id)"
  if [ "$DEV_MODE" == true ]; then
    # this has already been done in assemble
    #echo "Installing dev dependencies..."
    #npm install
    echo "Launching via nodemon..."
    exec npx nodemon --inspect="$DEBUG_PORT"
  else
    echo "Launching via npm..."
    exec npm run -d $NPM_RUN
  fi
}

# Allow debugging the builder image itself, by using:
# $ docker run -it nodeshift/centos-s2i-nodejs --debug
#
[ "$1" == "--debug" ] && exec /bin/bash

run_node